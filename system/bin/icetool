#!/system/xbin/bash
ICETOOL_VERSION="0.7" # Script version
HELP="Usage: $0 <cmd> ..."
BASE_DIR=/sdcard/blackice
MARKET_DIR=$BASE_DIR/market
RIL_DIR=$BASE_DIR/ril
GPS_DIR=$BASE_DIR/gpsconf
BOOTANIM_DIR=$BASE_DIR/bootanimation/
BASE_URL=http://www.losinj.com/blackice
ICETOOL_URL=$BASE_URL/icetool.tgz
ICETOOL_VERSION_URL=$BASE_URL/icetool.version
WHO=`whoami`

### More extra content to come
EXTRA_APKS="ICS_2.4_Launcher_2.apk:e518049b4359ffcd4769a98b034f73bf \
            Google++2.0.0.apk:18eb66a953318ef3be5702a063454a38 \
            Google_Maps_v5.11.0.apk:c0ac28f4a503807d10579090d105e894 \
            Street+View+1.7.0.4.apk:d761639c4abe8b13538ca77e8f6b2ada \
            Google+Music+4.0.1.apk:d31a972968ab0798921aa6f3b9b4aaf1 "

# Extra APKs names
EXTRA_APKS_NAMES=`for i in $EXTRA_APKS; do B=${i%\:*} ; echo "$B@" ; done | tr '\n' ' ' | sed 's/\ *//g'`
EXTRA_APKS_DESCR="ICS v2.4 Launcher2@Google++ 2.0@Google Maps v5.11.0@Street View v1.7.0.4@Google Music v4.0.1"

# Switch Keyboard options
EXTRA_KEY_NAMES="nexussswype@htcime"
EXTRA_KEY_DESCR="Nexus S Swype (black)@HTC IME Mod (grey)"

# Switch launcher options
EXTRA_LAUNCH_NAMES="udlauncher@adwlauncher"
EXTRA_LAUNCH_DESCR="UD Launcher (black)@ADW Launcher (color)"

die () {
  echo $@
  exit 1
}

if [ "$WHO" != "root" ]; then
  echo "Must be root"
  exit 1
fi

if [ "$1" = "" ]; then
  echo "$HELP"
  exit 2
fi
CMD=$1


####
# Here we setup the offered commands for the gui
# We will print the following tags:
# CATEGORIES: high level categories (=gui tabs)
# CATEGORY_COMMANDS: relation of commands included in each high level category
# COMMANDS:   all the supported commands
# OPTIONS:    options available for each command (if any)
Setup() {
  # Categories
  CATEGORIES="CATEGORIES:sys@apps@dsp@gps@ril"

  # Categories - commands relationship
  CATEGORY_COMMANDS="${CATEGORY_COMMANDS}CATEGORY_COMMANDS:sys:upgrade@remount@fastcharge@charge@hosts@density\n"
  CATEGORY_COMMANDS="${CATEGORY_COMMANDS}CATEGORY_COMMANDS:apps:market@bootanim@switchkeyboard@switchlauncher@extraapk\n"
  CATEGORY_COMMANDS="${CATEGORY_COMMANDS}CATEGORY_COMMANDS:gps:gpsconf\n"
  CATEGORY_COMMANDS="${CATEGORY_COMMANDS}CATEGORY_COMMANDS:dsp:dspinit\n"
  CATEGORY_COMMANDS="${CATEGORY_COMMANDS}CATEGORY_COMMANDS:ril:ril\n"

  # Basic commands
  SUPPORTED_COMMANDS="COMMANDS:"

  # Upgrade command
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}upgrade@";
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:upgrade:checkversion@icetool\n"; # TODO @rom@kernel
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:upgrade:Check for new version@Upgrade ICETool\n"

  # Remount command
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}remount@";
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:remount:rw@ro\n";
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:remount:Remount /system as read/write@Remount /system as read-only\n"

  # hosts command
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}hosts@";
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:hosts:\n";
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:hosts:Refresh hosts file (adfree replacement)\n"

  # Density is mandatory but has 3 options
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}density@";
  DENSITY_LIST="190@200@240"
  DENSITY_DESCR="Set LCD density as 190 (LordClockan style)@Set LCD density as 200 (AlienMind style)@Set LCD density as 240 (Default style)"
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:density:$DENSITY_LIST\n";
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:density:$DENSITY_DESCR\n"

  # Boot animations catalog
  EXTRA_BOOTANIM_NAMES=`ls $BOOTANIM_DIR/ | tr '\n' '@'`
  EXTRA_BOOTANIM_DESCR=`for i in $BOOTANIM_DIR/*; do basename $i .zip ; done | tr '\n' ' ' | tr ' ' '@' | tr '-' ' '`
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}bootanim@";
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:bootanim:$EXTRA_BOOTANIM_NAMES\n";
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:bootanim:$EXTRA_BOOTANIM_DESCR\n"

  # Rest of market options
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}extraapk@";
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:extraapk:$EXTRA_APKS_NAMES\n";
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:extraapk:$EXTRA_APKS_DESCR\n"
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}switchkeyboard@";
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:switchkeyboard:$EXTRA_KEY_NAMES\n";
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:switchkeyboard:$EXTRA_KEY_DESCR\n"
  SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}switchlauncher@";
  COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:switchlauncher:$EXTRA_LAUNCH_NAMES\n";
  COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:switchlauncher:$EXTRA_LAUNCH_DESCR\n"

  # The rest of the commands are optional and depending on environmental factors
  if [ -f /sys/class/power_supply/battery/force_high_power_charging ]; then
    SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}fastcharge@"
    COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:fastcharge:1@0\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:fastcharge:Force high power charging@Disable high power charging\n"
  fi
  if [ -f /sys/devices/platform/rs30100001:00000000/power_supply/battery/charge_on_plug_enabled ]; then
    SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}charge@"
    COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:charge:1@0\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:charge:Enable USB charging@Disable USB charging\n"
  fi
  if [ -d $MARKET_DIR ]; then
    SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}market@"
    MARKET_LIST=`for i in $MARKET_DIR/Vending*.apk; do basename $i ; done | tr '\n' '@'`
    MARKET_DESCR=`echo $MARKET_LIST | sed 's/Vending-/Install and launch Market v/g' | sed 's/.apk//g'`
    COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:market:$MARKET_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:market:$MARKET_DESCR\n"
  fi
  if [ -d $RIL_DIR ]; then
    SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}ril@"
    RIL_LIST=`ls $RIL_DIR/ | tr '\n' '@'`
    RIL_DESCR=$RIL_LIST
    COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:ril:showril@$RIL_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:ril:Show RIL info@$RIL_DESCR\n"
  fi
  if [ -d $GPS_DIR ]; then
    SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}gpsconf@"
    GPS_LIST=`ls $GPS_DIR/ | tr '\n' '@'`
    GPS_DESCR=$GPS_LIST
    COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:gpsconf:$GPS_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:gpsconf:$GPS_DESCR\n"
  fi
  if [ -f /system/bin/snd3254 ]; then
    SUPPORTED_COMMANDS="${SUPPORTED_COMMANDS}dspinit@"
    DSP_LIST=`echo "" | snd3254 -dspmode | grep -v Please | awk -F'.' '{ printf("%s@",$1); }'`
    DSP_DESCR=`echo "" | snd3254 -dspmode | grep -v Please | awk '{ printf("%s@",$2); }'`
    COMMAND_OPTIONS="${COMMAND_OPTIONS}OPTIONS:dspinit:$DSP_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}DESCRIPTIONS:dspinit:$DSP_DESCR\n"
  fi
}

ListCommands() {
  printf "$SUPPORTED_COMMANDS\n"
  printf "$CATEGORIES\n"
  printf "$CATEGORY_COMMANDS"
  ( printf "$COMMAND_OPTIONS" ; printf "$COMMAND_DESCRIPTIONS" ) | sort
}

Upgrade() {
  local MODE=$1
  case $MODE in
    "checkversion") CheckVersion ;;
    "icetool")      UpgradeICETool ;;
  esac
}

CheckVersion() {
  printf "Looking for new versions...\n"
  mkdir -p /data/tmp
  cd /data/tmp
  rm -f icetool.version
  wget "$ICETOOL_VERSION_URL" &>/dev/null
  RET=$?
  if [ "$RET" != "0" ]; then
    echo "Error checking new version"
    exit 1
  fi
  ICETOOL_REMOTE_VERSION=`cat icetool.version`
  printf "Current ICETool version: $ICETOOL_VERSION\n"
  printf "Latest version available: $ICETOOL_REMOTE_VERSION\n"
  cd - &>/dev/null
}

UpgradeICETool() {
  CheckVersion 
  RET=$?
  if [ $RET != 0 ]; then
    return $RET
  fi
  cd /data/tmp
  ICETOOL_REMOTE_VERSION=`cat icetool.version`
  if [ "$ICETOOL_VERSION" != "$ICETOOL_REMOTE_VERSION" ]; then
    rm -f icetool.tgz
    wget "$ICETOOL_URL" &>/dev/null
    RET=$?
    if [ "$RET" != "0" ]; then
      echo "Error downloading new version"
      exit 1
    fi
    cd /
    RemountSys "rw"                 &>/dev/null
    tar -xzvf /data/tmp/icetool.tgz &>/dev/null
    RemountSys "ro"                 &>/dev/null
    chmod 755 /system/bin/icetool
    chmod 644 /system/app/ICETool.apk
    cd - &>/dev/null
    echo "ICETool v$ICETOOL_REMOTE_VERSION succesfully installed. Please restart ICETool"
    exit 0
  fi
  cd - &>/dev/null
}

RemountSys() {
  local MODE=$1
  mount -o remount,$MODE /system
}

Reboot() {
  local PAUSE=$1
  printf "Syncing...\n"
  sync ; sync ; sync
  printf "Rebooting in $PAUSE seconds...\n"
  for i in `seq 1 $PAUSE`; do
    printf "%d." $i
    sleep 1
  done
  printf "\n"
  reboot
}

InstallMarket() {
  local APK=$1
  local VER=${APK##Vending-} 
  RemountSys "rw"
  pm uninstall com.android.vending
  rm -f /data/app/com.android.vending*apk
  cp $APK /system/app/Vending.apk
  chmod 644 /system/app/Vending.apk
  pm install $APK
  RemountSys "ro"
}

LaunchMarket() {
  am start -a android.intent.action.MAIN -n com.android.vending/com.android.vending.AssetBrowserActivity
}

Market() {
  VER=$1
  APK=$MARKET_DIR/Vending-${VER}.apk
  if [ -f $APK ]; then
    InstallMarket $APK &>/dev/null
    LaunchMarket &>/dev/null
    echo "Market $VER version installed"
  else
    echo "Couldn't find Market version $VER" 
    exit 1
  fi
}

InstallHost() {
  URL=http://someonewhocares.org/hosts/hosts
  mkdir -p /data/tmp
  cd /data/tmp
  rm -f hosts
  wget "$URL" &>/dev/null
  RET=$?
  RemountSys "rw"
  if [ "$RET" = "0" ]; then
    mv hosts /system/etc/hosts
    echo "hosts file updated"
  fi
  RemountSys "ro" 
}

FastCharge() {
  echo "$1" > /sys/class/power_supply/battery/force_high_power_charging
  echo "High power charging set to $1"
}

Charge() {
  echo "$1" > /sys/devices/platform/rs30100001:00000000/power_supply/battery/charge_on_plug_enabled
  echo "Charge on plug set to $1 - you may need to unplug/plug to make it work"
}

Remount() {
  if [ "$1" != "ro" -a "$1" != "rw" ]; then
    echo "Unknown mode $1"
    exit 1
  fi
  RemountSys "$1"
  mount | grep system
  echo "/system remounted"
}

GPSConf() {
  GPSCONF="$GPS_DIR/$@/gps.conf"
  if [ ! -f "$GPSCONF" ]; then
    echo "Nonexistent $GPSCONF!!!"
  else
    RemountSys "rw"
    cd /
    cp -p "$GPSCONF" system/etc/gps.conf
    RET=$?
    if [ "$RET" != "0" ]; then
      echo "Error copying $GPSCONF => /system/etc/gps.conf"
      exit 1
    else
      echo "GPS configuration for $@ applied - open GPS Status and redownload AGPS data"
    fi
    RemountSys "ro"
  fi
}

DSPInit() {
  MODE=$1

  # 00 <= MODE <= 99 # It is in fact to 25, but I dont want to limit this
  CHAR_STOP=$(expr "$MODE" : '\([0-9]*\)')
  test "$MODE" != "$CHAR_STOP" && die "Illegal value : $MODE"
  test $MODE -ge 00 -a $MODE -le 99 || die "Illegal value dspmode:$MODE (00>= MODE >=20)"
 
  snd3254 -dspmode $1 | grep "^DSP profile" # Remove all the options we already know
  echo "DSP profile for $1 applied"
}

RIL() {
  if [ "$1" = "showril" ]; then
    getprop | grep RIL
  else
    DIR=$RIL_DIR/$1
    if [ -d "$DIR" ]; then
      printf "RIL before patch: "
      getprop | grep RIL
      RemountSys "rw"
      cp -r $DIR/* /
      RemountSys "ro"
      echo "RIL switched to $1. Rebooting is highly recommended!"
    else 
       echo "Error: $DIR does not exist"
       exit 1
    fi
  fi
}

Density() {
  DENSITY=$1

  # 240 >= DENSITY >= 190
  CHAR_STOP=$(expr "$DENSITY" : '\([0-9]*\)')
  test "$DENSITY" != "$CHAR_STOP" && die "Illegal value : $DENSITY"
  test $DENSITY -ge 190 -a $DENSITY -le 240 || die "Illegal value Density:$DENSITY (240>= DENSITY >=190)"

  RemountSys "rw"
  sed  -i "s/ro.sf.lcd_density=.*/ro.sf.lcd_density=$DENSITY/g" /system/build.prop
  chmod 644 /system/build.prop
  RemountSys "ro"
  Reboot 5
}


###
#
# Extraapp - to download content
ExtraAPK() {
  if [ "$1" = "list" ]; then
    echo "$EXTRA_APKS_NAMES"
    exit 0
  fi
  APK=$1
  for i in $EXTRA_APKS; do
     B=${i%\:*}  # filename
     MD5SUM=${i##*:}  # md5
     if [ "$APK" = "$B" ]; then
       URL="$BASE_URL/$B"
       break
     fi
  done

  if [ ! -d /sdcard/blackice ]; then
    MK=1
    mkdir -p /sdcard/blackice
  fi
  cd /sdcard/blackice
  # We allow having it in /data/app
  if [ ! -f "$APK" -a -f "/data/app/$APK" ]; then
    cp /data/app/$APK .
  fi
  if [ -f "$APK" ]; then
    MD5SUM=`md5sum $APK | awk '{ print $1 }'`
    if [ "$MD5" = "$MD5SUM" ]; then
      GOOD=1
    fi
  fi
  if [ "$GOOD" != "1" ]; then
    rm -f "$APK"
    wget "$URL"  &>/dev/null
    RET=$?
    if [ "$RET" != "0" ]; then
      echo "Error downloading $APK"
      exit 1
    fi
    MD5=`md5sum $APK | awk '{ print $1 }'`
    if [ "$MD5" = "$MD5SUM" ]; then
      GOOD=1
    fi
  fi
  if [ "$GOOD" = "1" ]; then
    RemountSys "rw"
    cp /sdcard/blackice/$APK /data/app/
    chmod 644 /data/app/$APK
    RemountSys "ro"
    echo "Done!"
  else
    echo "Failed to download / install $APK"
    exit 1
  fi
}

###
#
# BootAnim - copy specific bootanimation to media
BootAnim() {
  local ANIM=$BOOTANIM_DIR/$1
  RemountSys "rw"
  cp -p $ANIM /system/media/bootanimation.zip
  RemountSys "ro"
  echo "$ANIM set as new bootanimation"
}

###
#
# TestBootAnim - Play current bootanimation
TestBootAnim() {
  bootanimation &
  PID=$!
  sleep 10
  kill $PID
}



###
# Cleanup - for older version directories, etc
# This wouldn't be on ICETool app, it is on users's risk
Cleanup() {
  echo "Removing old BlackICE packages from sdcard..."
  for i in /sdcard/market/  \
           /sdcard/gpsconf/ \
           /sdcard/ril/ \
           ; do
     rm -rf $i
     echo " [ $i ] Removed"
  done
}

#### Supported commands
shift
case $CMD in
  "setup")      Setup ; ListCommands ;;
  "upgrade")    Upgrade    "$1" ;;
  "fastcharge") FastCharge "$1" ;;
  "charge")     Charge     "$1" ;;
  "remount")    Remount    "$1" ;;
  "hosts")      InstallHost     ;;
  "market")     Market     "$1" ;;
  "gpsconf")    GPSConf    "$@" ;;
  "dspinit")    DSPInit    "$1" ;;
  "ril")        RIL        "$1" ;;
  "density")    Density    "$1" ;;
  "extraapk")   ExtraAPK   "$1" ;;
  "bootanim")   BootAnim   "$1" ;;
  "testbootanim") TestBootAnim  ;;
  "cleanup")    Cleanup    "$1" ;;

  ### Any other command - we are a wrapper
  *)            exec $CMD $@ ;;
esac

exit 0
