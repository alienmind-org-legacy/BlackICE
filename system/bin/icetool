#!/system/xbin/bash
HELP="Usage: $0 <cmd> ..."
MARKET_DIR=/sdcard/blackice/market
RIL_DIR=/sdcard/blackice/ril
GPS_DIR=/sdcard/blackice/gpsconf
WHO=`whoami`
if [ "$WHO" != "root" ]; then
  echo "Must be root"
  exit 1
fi

if [ "$1" = "" ]; then
  echo "$HELP"
  exit 2
fi
CMD=$1

Setup() {
  # Basic commands
  SUPPORTED_COMMANDS="remountsysrw|remountsysro|density"
  DENSITY_LIST="190|200|240"
  DENSITY_DESCR="190 (LordClockan style)|200 (AlienMind style)|240 (Default style)"

  # The rest of the commands are optional
  if [ -f /sys/class/power_supply/battery/force_high_power_charging ]; then
    SUPPORTED_COMMANDS="$SUPPORTED_COMMANDS|fastchargeon|fastchargeoff"
  fi
  if [ -f /sys/devices/platform/rs30100001:00000000/power_supply/battery/charge_on_plug_enabled ]; then
    SUPPORTED_COMMANDS="$SUPPORTED_COMMANDS|chargeenable|chargesdisable"
  fi
  if [ -d $MARKET_DIR ]; then
    SUPPORTED_COMMANDS="$SUPPORTED_COMMANDS|market"
    MARKET_LIST=`for i in $MARKET_DIR/Vending*.apk; do basename $i ; done | tr '\n' '|'`
    MARKET_DESCR=$MARKET_LIST
    COMMAND_OPTIONS="${COMMAND_OPTIONS}market:$MARKET_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}market:$MARKET_DESCR\n"
  fi
  if [ -d $RIL_DIR ]; then
    SUPPORTED_COMMANDS="$SUPPORTED_COMMANDS|ril"
    RIL_LIST=`ls $RIL_DIR/ | tr '\n' '|'`
    RIL_DESCR=$RIL_LIST
    COMMAND_OPTIONS="${COMMAND_OPTIONS}ril:$RIL_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}ril:$RIL_DESCR\n"
  fi
  if [ -d $GPS_DIR ]; then
    SUPPORTED_COMMANDS="$SUPPORTED_COMMANDS|gpsconf"
    GPS_LIST=`ls $GPS_DIR/ | tr '\n' '|'`
    GPS_DESCR=$GPS_LIST
    COMMAND_OPTIONS="${COMMAND_OPTIONS}gpsconf:$GPS_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}gpsconf:$GPS_DESCR\n"
  fi
  if [ -f /system/bin/snd3254 ]; then
    SUPPORTED_COMMANDS="$SUPPORTED_COMMANDS|dspinit"
    DSP_LIST=`echo "" | snd3254 -dspmode | grep -v Please | awk -F'.' '{ printf("%s|",$1); }'`
    DSP_DESCR=`echo "" | snd3254 -dspmode | grep -v Please | awk '{ printf("%s|",$2); }'`
    COMMAND_OPTIONS="${COMMAND_OPTIONS}dspinit:$DSP_LIST\n"
    COMMAND_DESCRIPTIONS="${COMMAND_DESCRIPTIONS}dspinit:$DSP_DESCR\n"
  fi
}

ListCommands() {
  printf "$SUPPORTED_COMMANDS\n"
  ( printf "$COMMAND_OPTIONS" ; printf "$COMMAND_DESCRIPTIONS" ) | sort
}

Remount() {
  local MODE=$1
  mount -o remount,$MODE /system
}

Reboot() {
  local PAUSE=$1
  printf "Syncing...\n"
  sync ; sync ; sync
  printf "Rebooting in $PAUSE seconds...\n"
  for i in `seq 1 $PAUSE`; do
    printf "%d." $i
    sleep 1
  done
  printf "\n"
  reboot
}

InstallMarket() {
  local APK=$1
  local VER=${APK##Vending-} 
  Remount "rw"
  pm uninstall com.android.vending
  rm -f /data/app/com.android.vending*apk
  if [ "$VER" != "2.3.6.apk" ]; then  # Backup
    cp /system/app/Vending.apk /sdcard/blackice/market/Vending-2.3.6.apk
  fi
  cp $APK /system/app/Vending.apk
  chmod 644 /system/app/Vending.apk
  pm install $APK
  Remount "ro"
}

LaunchMarket() {
  am start -a android.intent.action.MAIN -n com.android.vending/com.android.vending.AssetBrowserActivity
}

###
# Internal commands
#
# setup
if [ "$CMD" = "setup" ]; then
  Setup
  ListCommands
  exit 0

# fastchargeon
elif [ "$CMD" = "fastchargeon" ]; then
  echo "1" > /sys/class/power_supply/battery/force_high_power_charging
  echo "High power charging enabled"
  exit 0

###
# fastchargeoff
elif [ "$CMD" = "fastchargeoff" ]; then
  echo "0" > /sys/class/power_supply/battery/force_high_power_charging
  echo "High power charging disabled"

###
# remountsysrw
elif [ "$CMD" = "remountsysrw" ]; then
  Remount "rw"
  mount | grep system
  echo "/system remounted read/write"

###
# remountsysro
elif [ "$CMD" = "remountsysro" ]; then
  Remount "ro"
  mount | grep system
  echo "/system remounted read-only"

###
# chargedisable
elif [ "$CMD" = "chargedisable" ]; then
  echo "0" > /sys/devices/platform/rs30100001:00000000/power_supply/battery/charge_on_plug_enabled
  echo "Charge on plug disabled - unplug/plug to make it work"

###
# chargeenable
elif [ "$CMD" = "chargeenable" ]; then
  echo "1" > /sys/devices/platform/rs30100001:00000000/power_supply/battery/charge_on_plug_enabled
  echo "Charge on plug enabled - unplug/plug to make it work"

###
# market
elif [ "$CMD" = "market" ]; then
  VER=$2
  APK=/sdcard/blackice/market/Vending-${VER}.apk
  if [ -f $APK ]; then
    InstallMarket $APK &>/dev/null
    LaunchMarket &>/dev/null
    echo "Market $VER version installed"
  else
    echo "Couldn't find Market version $VER" 
    exit 1
  fi
###
# gpsconf
elif [ "$CMD" = "gpsconf" ]; then
  shift
  GPSCONF="/sdcard/blackice/gpsconf/$@/gps.conf"
  if [ ! -f "$GPSCONF" ]; then
    echo "Nonexistent $GPSCONF!!!"
  else
    Remount "rw"
    cd /
    cp -p "$GPSCONF" system/etc/gps.conf
    RET=$?
    if [ "$RET" != "0" ]; then
      echo "Error copying $GPSCONF => /system/etc/gps.conf"
    else
      echo "GPS configuration for $2 applied - open GPS Status and redownload AGPS data"
    fi
    Remount "ro"
  fi

###
# dspchooser
elif [ "$CMD" = "dspinit" ]; then
    snd3254 -dspmode $2
    echo "DSP profile for $2 applied"

###
# ril
elif [ "$CMD" = "ril" ]; then
  DIR=/sdcard/blackice/ril/$2
  if [ -d "$DIR" ]; then
    printf "RIL before patch: "
    getprop | grep RIL
    Remount "rw"
    cp -r $DIR/* /
    Remount "ro"
    echo "RIL switched to $2. Rebooting is highly recommended!"
  else 
     echo "Error: $DIR does not exist"
     exit 1
  fi

###
# density
elif [ "$CMD" = "density" ]; then
  DENSITY=$2
  Remount "rw"
  cat /system/build.prop |  sed "s/ro.sf.lcd_density=.*/ro.sf.lcd_density=$DENSITY/g" > /system/build.prop.new
  mv /system/build.prop.new /system/build.prop
  chmod 644 /system/build.prop
  Remount "ro"
  Reboot 5

###
# Cleanup - for older version directories, etc
# This wouldn't be on ICETool app, it is on users's risk
elif [ "$CMD" = "cleanup" ]; then
  echo "Removing old BlackICE packages from sdcard..."
  for i in /sdcard/market/  \
           /sdcard/gpsconf/ \
           /sdcard/ril/ \
           ; do
     rm -rf $i
     echo " [ $i ] Removed"
  done
       
### Any other command - we are a wrapper
else

  exec $@

fi
