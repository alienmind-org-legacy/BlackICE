#!/system/bin/sh
#
# icetool - by AlienMind
# ICETool.apk companion scripts
# It provides an execution interface for controlled commands,
# plus a configuration interface that allows modifying ICETool.apk
# interface (adding and removing tabs and options)
#
# TODO:
#
# * UV scripts should look for configs on an sdcard folder
# * There are still some commands harcoded into the app
#   (labeled with *). It's needed to make them optional too
#   and exported via icetool setup
#
. /system/etc/icetool.conf
ICETOOL_VERSION="0.92" # Script version
HELP="Usage: $0 <cmd> ..."
### Only root allowed
WHO=`whoami 2>&1`
if [ "$WHO" != "root" -a "$WHO" != "whoami: unknown uid 0" ]; then
  echo "Must be root"
  exit 1
fi

if [ "$1" = "" ]; then
  echo "$HELP"
  exit 2
fi

die () {
  echo $@
  exit 1
}

###
# AutoInstall
# Execute a sequence of commands available on a fixed path
# configuration file
AutoInstall() {

  # Some considerations from here:
  # * We are running in a recovery
  # * We haven't internet connection
  # * We don't want to reboot (ie: dpi command normally does)
  export RECOVERY_MODE="1"
  export PATH=$PATH:/system/bin/:/system/xbin/

  if [ -f "$ICETOOL_AUTORUN" ]; then
    echo "$ICETOOL_AUTORUN found! applying custom settings..."
    # Leave the set -x for this execution
    # This is intended to run from updater-script
    # and we want verbosity for each option applied
    cat $ICETOOL_AUTORUN | while read A; do
      COMMENT=`echo $A | grep -v ^\#`
      if [ "$COMMENT" = "" ]; then
        continue
      fi
      main $A
    done
  else
    echo "$ICETOOL_AUTORUN not found, leaving default settings..."
  fi
}


ListCommands() {
  printf "ICETOOL_VERSION:$ICETOOL_VERSION\n"
  printf "$SUPPORTED_COMMANDS\n"
  printf "$CATEGORIES\n"
  printf "$CATEGORY_COMMANDS"
  ( printf "$COMMAND_OPTIONS" ; printf "$COMMAND_DESCRIPTIONS" ) | sort
}

Upgrade() {
  local MODE=$1
  case $MODE in
    "version")      PrintVersion ;;
    "checkversion") CheckVersion ;;
    "icetool")      UpgradeICETool ;;
  esac
}

PrintVersion() {
  printf "$ICETOOL_VERSION"
}

CheckVersion() {
  printf "Looking for new versions...\n"
  mkdir -p /data/tmp
  cd /data/tmp
  rm -f icetool.version
  wget "$ICETOOL_VERSION_URL"  >/dev/null 2>&1
  RET=$?
  if [ "$RET" != "0" ]; then
    echo "Error checking new version"
    exit 1
  fi
  ICETOOL_REMOTE_VERSION=`cat icetool.version`
  printf "Current ICETool version: $ICETOOL_VERSION\n"
  printf "Latest version available: $ICETOOL_REMOTE_VERSION\n"
  cd - &>/dev/null
}

UpgradeICETool() {
  CheckVersion 
  RET=$?
  if [ $RET != 0 ]; then
    return $RET
  fi
  cd /data/tmp
  ICETOOL_REMOTE_VERSION=`cat icetool.version`
  if [ "$ICETOOL_VERSION" != "$ICETOOL_REMOTE_VERSION" ]; then
    rm -f icetool.tgz
    wget "$ICETOOL_URL" &>/dev/null
    RET=$?
    if [ "$RET" != "0" ]; then
      echo "Error downloading new version"
      exit 1
    fi
    cd /
    RemountSys "rw"                 &>/dev/null
    tar -xzvf /data/tmp/icetool.tgz &>/dev/null
    RemountSys "ro"                 &>/dev/null
    chmod 755 /system/bin/icetool
    chmod 644 /system/app/ICETool.apk
    cd - &>/dev/null
    echo "ICETool v$ICETOOL_REMOTE_VERSION succesfully installed. Please restart ICETool"
    exit 0
  fi
  cd - &>/dev/null
}

RemountSys() {
  local MODE=$1
  mount -o remount,$MODE /system > /dev/null 2>&1
}

Reboot() {
  local PAUSE=$1

  if [ "$RECOVERY_MODE" != "" ]; then
    return 0
  fi

  printf "Syncing...\n"
  sync ; sync ; sync
  printf "Rebooting in $PAUSE seconds...\n"
  for i in `seq 1 $PAUSE`; do
    printf "%d." $i
    sleep 1
  done
  printf "\n"
  reboot
}

InstallMarket() {
  local APK=$1
  local VER=${APK##Vending-} 
  RemountSys "rw"
  pm uninstall com.android.vending
  rm -f /data/app/com.android.vending*apk
  cp $APK /system/app/Vending.apk
  chmod 644 /system/app/Vending.apk
  if [ "$RECOVERY_MODE" != "1" ]; then
    pm install $APK
  fi
  RemountSys "ro"
}

LaunchMarket() {
  if [ "$RECOVERY_MODE" != "1" ]; then
    am start -a android.intent.action.MAIN -n com.android.vending/com.android.vending.AssetBrowserActivity
  fi
}

Market() {
  VER=$1
  APK=$MARKET_DIR/Vending-${VER}.apk
  if [ -f $APK ]; then
    InstallMarket $APK &>/dev/null
    LaunchMarket &>/dev/null
    echo "Market $VER version installed"
  else
    echo "Couldn't find Market version $VER" 
    exit 1
  fi
}

InstallHost() {
  URL=http://someonewhocares.org/hosts/hosts
  mkdir -p /data/tmp
  cd /data/tmp
  rm -f hosts
  wget "$URL" &>/dev/null
  RET=$?
  RemountSys "rw"
  if [ "$RET" = "0" ]; then
    mv hosts /system/etc/hosts
    echo "hosts file updated"
  fi
  RemountSys "ro" 
}

FastCharge() {
  echo "$1" > /sys/class/power_supply/battery/force_high_power_charging
  echo "High power charging set to $1"
}

Charge() {
  echo "$1" > /sys/devices/platform/rs30100001:00000000/power_supply/battery/charge_on_plug_enabled
  echo "Charge on plug set to $1 - you may need to unplug/plug to make it work"
}

Remount() {
  if [ "$1" != "ro" -a "$1" != "rw" ]; then
    echo "Unknown mode $1"
    exit 1
  fi
  RemountSys "$1"
  mount | grep system
  echo "/system remounted"
}

GPSConf() {
  GPSCONF="$GPS_DIR/$@/gps.conf"
  if [ ! -f "$GPSCONF" ]; then
    echo "Nonexistent $GPSCONF!!!"
  else
    RemountSys "rw"
    cd /
    cp -p "$GPSCONF" system/etc/gps.conf
    RET=$?
    if [ "$RET" != "0" ]; then
      echo "Error copying $GPSCONF => /system/etc/gps.conf"
      exit 1
    else
      echo "GPS configuration for $@ applied - open GPS Status and redownload AGPS data"
    fi
    RemountSys "ro"
  fi
}

DSPInit() {
  MODE=$1

  # 00 <= MODE <= 99 # It is in fact to 25, but I dont want to limit this
  CHAR_STOP=$(expr "$MODE" : '\([0-9]*\)')
  test "$MODE" != "$CHAR_STOP" && die "Illegal value : $MODE"
  test $MODE -ge 00 -a $MODE -le 99 || die "Illegal value dspmode:$MODE (00>= MODE >=20)"
 
  snd3254 -dspmode $1 | grep "^DSP profile" # Remove all the options we already know
  echo "DSP profile for $1 applied"
}

RIL() {
  if [ "$1" = "showril" ]; then
    getprop | grep RIL
  else
    DIR=$RIL_DIR/$1
    if [ -d "$DIR" ]; then
      printf "RIL before patch: "
      getprop | grep RIL
      RemountSys "rw"
      cp -r $DIR/* /
      RemountSys "ro"
      echo "RIL switched to $1. Rebooting is highly recommended!"
    else 
       echo "Error: $DIR does not exist"
       exit 1
    fi
  fi
}

Density() {
  DENSITY=$1

  # 240 >= DENSITY >= 190
  CHAR_STOP=$(expr "$DENSITY" : '\([0-9]*\)')
  test "$DENSITY" != "$CHAR_STOP" && die "Illegal value : $DENSITY"
  test $DENSITY -ge 190 -a $DENSITY -le 240 || die "Illegal value Density:$DENSITY (240>= DENSITY >=190)"

  RemountSys "rw"
  sed  -i "s/ro.sf.lcd_density=.*/ro.sf.lcd_density=$DENSITY/g" /system/build.prop
  chmod 644 /system/build.prop
  RemountSys "ro"
  Reboot 5
}

BraviaEngine() {
  MODE=$1

  if [ "$MODE" != "on" -a "$MODE" != "off" ]; then
    die "Illegal value : $MODE"
  fi

  RemountSys "rw"
  if [ "$MODE" = "on" ]; then
    sed  -i "s/ro.service.swiqi.supported=.*/ro.service.swiqi.supported=true/g" /system/build.prop
    sed  -i "s/persist.service.swiqi.enable=.*/persist.service.swiqi.enable=1/g" /system/build.prop
    echo "Bravia Engine enabled - reboot needed to take effect"
  elif [ "$MODE" = "off" ]; then
    sed  -i "s/ro.service.swiqi.supported=.*/ro.service.swiqi.supported=false/g" /system/build.prop
    sed  -i "s/persist.service.swiqi.enable=.*/persist.service.swiqi.enable=0/g" /system/build.prop
    echo "Bravia Engine disabled - reboot needed to take effect"
  fi
  chmod 644 /system/build.prop
  RemountSys "ro"
}


###
#
# ExtraPKG - to download extra content on /system (.tgz)
ExtraPKG() {
  if [ "$1" = "list" ]; then
    echo "$EXTRA_PKG_NAMES"
    exit 0
  fi
  PKG=$1
  for i in $EXTRA_PKGS; do
     B=${i%\:*}  # filename
     MD5SUM=${i##*:}  # md5
     if [ "$PKG" = "$B" ]; then
       URL="$BASE_URL/$B"
       break
     fi
  done

  if [ ! -d $BASE_DIR ]; then
    MK=1
    mkdir -p $BASE_DIR 
  fi
  cd $BASE_DIR
  if [ -f "$PKG" ]; then
    MD5=`md5sum $PKG | awk '{ print $1 }'`
    if [ "$MD5" = "$MD5SUM" ]; then
      GOOD=1
    fi
  fi
  if [ "$GOOD" != "1" ]; then
    if [ "$RECOVERY_MODE" != "1" ]; then
      rm -f "$PKG"
      wget "$URL"  &>/dev/null
      RET=$?
      if [ "$RET" != "0" ]; then
        echo "Error downloading $PKG"
        exit 1
      fi
      MD5=`md5sum $PKG | awk '{ print $1 }'`
      if [ "$MD5" = "$MD5SUM" ]; then
        GOOD=1
      fi
    else
      echo "Error checking $PKG ($MD5 != $MD5SUM) and we can't download - STOP"
    fi
  fi
  if [ "$GOOD" = "1" ]; then
    RemountSys "rw"
    cd /
    tar -xzvf $BASE_DIR/$PKG
    chmod 644 `tar -tzvf $BASE_DIR/$PKG | awk '(substr($NF,length($NF)) != "/"){ print $NF }'`
    RemountSys "ro"
    echo "Done!"
  else
    echo "Failed to download / install $PKG"
    exit 1
  fi
}

###
#
# Extraapp - to download APK content
ExtraAPK() {
  if [ "$1" = "list" ]; then
    echo "$EXTRA_APKS_NAMES"
    exit 0
  fi
  APK=$1
  for i in $EXTRA_APKS; do
     B=${i%\:*}  # filename
     MD5SUM=${i##*:}  # md5
     if [ "$APK" = "$B" ]; then
       URL="$BASE_URL/$B"
       break
     fi
  done

  if [ ! -d $BASE_DIR ]; then
    MK=1
    mkdir -p $BASE_DIR
  fi
  cd $BASE_DIR
  # We allow having it in /data/app
  if [ ! -f "$APK" -a -f "/data/app/$APK" ]; then
    cp /data/app/$APK .
  fi
  if [ -f "$APK" ]; then
    MD5SUM=`md5sum $APK | awk '{ print $1 }'`
    if [ "$MD5" = "$MD5SUM" ]; then
      GOOD=1
    fi
  fi
  if [ "$GOOD" != "1" ]; then
    rm -f "$APK"
    wget "$URL"  &>/dev/null
    RET=$?
    if [ "$RET" != "0" ]; then
      echo "Error downloading $APK"
      exit 1
    fi
    MD5=`md5sum $APK | awk '{ print $1 }'`
    if [ "$MD5" = "$MD5SUM" ]; then
      GOOD=1
    fi
  fi
  if [ "$GOOD" = "1" ]; then
    RemountSys "rw"
    SYSAPK=`echo $EXTRA_APKS_SYS | grep $APK`
    if [ "$SYSAPK" != "" ]; then
      DEST="/system/app/$APK"
    else
      DEST="/data/app/$APK"
    fi
    cp $BASE_DIR/$APK $DEST
    chmod 644 $DEST
    RemountSys "ro"
    echo "Done!"
  else
    echo "Failed to download / install $APK"
    exit 1
  fi
}

###
#
# BootAnim - copy specific bootanimation to media
BootAnim() {
  local ANIM=$BOOTANIM_DIR/$1
  RemountSys "rw"
  cp -p $ANIM /system/media/bootanimation.zip
  RemountSys "ro"
  echo "$ANIM set as new bootanimation"
}

###
#
# TestBootAnim - Play current bootanimation
TestBootAnim() {
  bootanimation &
  PID=$!
  sleep 10
  kill $PID
}

###
#
# Overlay - Copy custom content from sdcard
Overlay() {
  local DST="$1"
  local SRC="$2"

  if [ "$DST" = "/system" ]; then
    DEV=/dev/block/mmcblk0p25
  elif [ "$DST" = "/data" ]; then
    DEV=/dev/block/mmcblk0p26
  else
    die "overlay: Invalid destination $DST"
  fi

  if [ ! -d "$SRC" ]; then
    die "overlay: Invalid source $SRC"
  fi

  mount $DEV $DST &>/dev/null || mount -o remount,rw $DEV $DST
  cp -av $SRC/* $DST/
  umount $DST
}

###
# UV
UV() {
  local script=$1
  if [ ! -f "$script" ]; then
    echo "Not found UV script: $script"
    exit 1
  fi
  mount -o remount,rw /system
  rm -f /system/etc/init.d/99voltages
  cp $script /system/etc/init.d/99voltages
  chmod 777 /system/etc/init.d/99voltages
  /system/etc/init.d/99voltages
  mount -o remount,ro /system
  echo "UV script $script applied"
} 

###
#
# BootSoundOn - Enable default bootsound
BootSoundOn() {
  # Perform bootsound script creation
  BootSoundInstall

  # Enable boot sound
  mount -o remount,rw /system
  if [ -e /data/local/boot/android_audio.mp3 ];
  	then
  		cp /data/local/boot/android_audio.mp3 /system/media/android_audio.mp3
  		rm /data/local/boot/android_audio.mp3
  fi
  sleep 1
  mount -o remount,ro /system
  echo "boot sound enabled.."
}

###
#
# BootSoundOff - Disable default bootsound
BootSoundOff() {
  RemountSys "rw"
  mkdir -p /data/local/boot/
  if [ -e /system/media/android_audio.mp3 ]; then
    mv /system/media/android_audio.mp3 /data/local/boot/android_audio.mp3
  fi
  RemountSys "ro"
  echo "Boot sound disabled"
}

###
#
# BootSoundInstall - Install boot sound service at boottime
BootSoundInstall() {
  echo "preparing system..."
  #Setting up the system for read/write access
  mount -o remount,rw /system
  #linking busybox mkdir (broken in rc2)
  rm /system/bin/mkdir
  ln -s /system/xbin/mkdir /system/bin/mkdir
  mkdir -p /data/local/boot
  mount -o rw,remount /system
  echo "preparing startup scripts..."
  #This is to create the needed scripts in init.local.rc
  if [ "`grep bootsound /system/etc/init.local.rc`" = "" ]; then
    cat >> /system/etc/init.local.rc <<EOF
  ###Bootsound - Safe to Delete: Start ###
  service bootsound /system/bin/bootsound
          user media
          group audio
          disabled
          oneshot

  on property:init.svc.bootanim=running   # to correct timing
          start bootsound

  on property:dev.bootcomplete=1
          stop bootsound
  ### Bootsound - Safe to Delete: End ###
EOF
  fi
  if [ ! -f /system/bin/bootsound ]; then
    echo "creating script for bootsound in /system/bin..."
    #Now creating the bootsound script
    cat > /system/bin/bootsound <<EOF
#!/system/bin/sh
bprop=/system/build.prop
play=$(cat $bprop | egrep -c -i -o ro.config.play.bootsound=1)
if [ "$play" != "" ]; then
        stagefright -a -o /system/media/android_audio.mp3
fi
exit 0
EOF
  fi
  #Changing some permissions
  chmod 777 /system/bin/bootsound
  chown root:shell /system/bin/bootsound
  if [ "`grep ro.config.play.bootsound /system/build.prop`" = "" ]; then
    echo 'ro.config.play.bootsound=1' >> /system/build.prop
  fi
  mount -o ro,remount /system
  echo "Boot sound service installed."
}

###
#
#
NewBootAnim() {
  mount -o remount,rw /system
  if [ -e /sdcard/bootanimation.zip ];
  	then
  		cp /sdcard/bootanimation.zip /system/media/bootanimation.zip
  fi
  sleep 1
  mount -o remount,ro /system
  echo "new boot anim set."
}

##
#
#
NewBootSound() {
  mount -o remount,rw /system
  if [ -e /sdcard/android_audio.mp3 ];
  	then
  		cp /sdcard/android_audio.mp3 /system/media/android_audio.mp3
  fi
  sleep 1
  mount -o remount,ro /system
  echo "new boot sound set."
  sleep 2
  bootsound
}

###
#
#
NewLockSounds() {
  mount -o remount,rw /system >/dev/null 2>&1
  if [ -e /sdcard/lock.ogg ]; then
    cp /sdcard/lock.ogg /system/media/audio/ui/Lock.ogg
    echo "New lock sound set"
  fi
  if [ -e /sdcard/unlock.ogg ]; then
    cp /sdcard/unlock.ogg /system/media/audio/ui/Unlock.ogg
    echo "New unlock sound set"
  fi
  sleep 1
  mount -o remount,ro /system >/dev/null 2>&1
}

###
#
#
Renice() {
  if [ ! -f $BASE_DIR/renice.txt -a
            $BASE_DIR/renice.txt.example ]; then
    cp -p $BASE_DIR/renice.txt.example $BASE_DIR/renice.txt
  fi
  if [ -f $BASE_DIR/renice.txt ]; then
    cat $BASE_DIR/renice.txt | grep -v ^\# | while read PNAME PRIO ;
 		do
 			PID=`ps | grep $PNAME | awk '{ print $2 }'`
      if [ "$PID" != "" -a "$PRIO" != "" ]; then
        renice $PRIO $PID
        echo "$PNAME (pid=$PID) reniced to $PRIO"
 			fi
 		done
  fi
}



###
# Cleanup - for older version directories, etc
# This wouldn't be on ICETool app, it is on users's risk
Cleanup() {
  echo "Removing old BlackICE packages from sdcard..."
  for i in /sdcard/market/  \
           /sdcard/gpsconf/ \
           /sdcard/ril/ \
           ; do
     rm -rf $i
     echo " [ $i ] Removed"
  done
}

#### Main execution
main() {
  CMD=$1
  shift

  #### Recovery mode
  if [ "$RECOVERY_MODE" = "1" ]; then
    ALLOWED_CMD=`echo $RECOVERY_CMD_WHITELIST | grep $CMD`
    if [ "$ALLOWED_CMD" = "" ]; then
      echo "Command $CMD not allowed in recovery mode"
      exit 1
    fi
  fi

  #### All of supported commands
  case $CMD in

    # Autoconfiguration of the tool
    "setup")        Setup ; ListCommands ;;
    "autoinstall")  AutoInstall ;;
    "upgrade")      Upgrade    "$1" ;;

    # Autorun.txt commands
    "overlay")      Overlay    "$1" "$2" ;;
    "cleanup")      Cleanup    "$1" ;;

    # System & kernel tweaks
    "fastcharge")   FastCharge "$1" ;;
    "charge")       Charge     "$1" ;;
    "remount")      Remount    "$1" ;;
    "extraapk")     ExtraAPK   "$1" ;;
    "extrapkg")     ExtraPKG   "$1" ;;
    "renice")       Renice ;;

    # Sound management
    "dspinit")       DSPInit    "$1" ;;
    "bootsoundon")   BootSoundOn     ;;   # Hardcoded into ICETool.apk
    "bootsoundoff")  BootSoundOff    ;;   # *
    "newbootsound")  NewBootSound    ;;   # *
    "newlocksounds") NewLockSounds   ;;   # *

    # Boot animation management
    "bootanim")     BootAnim   "$1" ;;    # *
    "testbootanim") TestBootAnim    ;;    # *
    "newbootanim")  NewBootAnim     ;;    # *

    # Other customizations
    "hosts")        InstallHost     ;;
    "market")       Market     "$1" ;;
    "gpsconf")      GPSConf    "$@" ;;
    "ril")          RIL        "$1" ;;
    "density")      Density    "$1" ;;
    "braviaengine") BraviaEngine "$1" ;;

    # Old independent scripts
    # To be renamed in ICETool.apk

    # UV Scripts
    "25uvon")       UV "/system/media/uvscripts/25uv/99voltages"  ;;     # *
    "50uvon")       UV "/system/media/uvscripts/50uv/99voltages"  ;;     # *
    "puvon")        UV "/system/media/uvscripts/puv/99voltages"   ;;     # *
    "puvxon")       UV "/system/media/uvscripts/puvx/99voltages"  ;;     # *
    "uuvon")        UV "/system/media/uvscripts/uuv/99voltages"   ;;     # *
    "uvoff")        UV "/system/media/uvscripts/stock/99voltages" ;;     # *
  
    ### Any other command - we are a wrapper
    *)            exec $CMD $@ ;;
    esac

}

## Normal execution - just main
main $@
exit $?
