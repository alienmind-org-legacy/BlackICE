#
# build_example.ini
#

#
# This is an example .ini file that is used by ICEDRoid/tools/build.sh. Its purpose
# is to define default values for various variables required by build.sh so that
# you don't have to specify all the options on a command line!
#
# This file is part of the BlackICE project, so instead of modifying it, it is
# better to copy it to a new name and modify that file for your use.
#
# The information in this file as well as other command line arguments are processed
# and verified by ICEDRoid/build_scripts/init.sh.
#

#
# VERBOSE choices are {0,1,2,3,4,5,6,7,8,9}.
#   0 = extra quite (may not be implemented yet)
#   1 = normal build messages (default)
#   2 = a little more build messages
#   3..9 = even more messages (may not be implemented yet)
VERBOSE=1

#
# CLEAN_TYPE {cm7, bi, all, ""}
# No need to specify CLEAN_TYPE here unless you always want to do a clean instead
# of building anything! Normally the '-clean xxx' command line argument makes
# more sense.
#   ""  = do a normal build
#   cm7 = clean CM7 (make clobber) and then exit
#   bi  = clean BlackICE (make clean) and then exit
#   all = clean CM7 and BlackICE and then exit
# If any clean is specified then nothing will be built and most other arguments
# will be ignored.
#
CLEAN_TYPE=

#
# ROM_TYPE choices are {cm7, bi, all}
# This specifies what ROM (KANG) to build
#   cm7 = Build CM7 only. This requires that you have already checked out the
#         entire CM7 source code!
#   bi  = Build BlackICE only. This requires that you have already cloned the
#         BlackICE git project. This also requires a CM7 KANG to build on top of.
#         This can be one you build previously or downloaded (e.g. a CM7 nightly
#         or stable build).
#   all = Build CM7 first and then build BlackICE on top of that result.
ROM_TYPE=bi

#
# SYNC_TYPE choices are {cm7, bi, all, ""}
# This specifies what, if any, syncing to do before building.
#   ""  = Do not sync anything
#   cm7 = Sync the CM7 source by doing a 'repo sync'
#   bi  = Sync the BlackICE source by doing a 'git pull'
#   all = Synce both CM7 and BlackICE
SYNC_TYPE=

#
# PUSH_TO_PHONE choices are {no, yes}
# Determines whether the final KANG is copied to your phone after it is built
#   no  = no, do not push the result to your phone.
#   yes = 'adb push' the resulting KANG (CM7 or BlackICE) to your phone, requires
#         your phone to be connected to your PC via USB and requires the 'adb'
#         tool to be in your path.
PUSH_TO_PHONE=no

#
# PHONE choices are {ace}
# This may be expanded in the future, but has only been tested with Ace so far.
# This is currently only important when doing a CM7 build.
PHONE=ace

#
# ANDROID_DIR is the full path name to where your CM7 sources are located on
# your hard drive. This is only used if CM7 is going to be built.
ANDROID_DIR=${HOME}/android/system

#
# BLACKICE_DIR is the full path name to where the cloned ICEDroid (BlackICE)
# project is located on your hard drive. This is only important if BlackICE is
# going to be built. Note that this needs to point to the ICEDroid directory,
# that is created when you clone this project (unless of course you rename that
# directory, but you shouldn't do that).
BLACKICE_DIR=${HOME}/DEVEL/ICEDroid

#
# If you are building a BlackICE only build you must provide CM7_BASE_NAME, which
# is the name of the CM7 KANG to build BlackICE on top of. Normally you will put
# that file in ICEDRoid/download.
# If you are building CM7 first then the build process will automatically copy
# that resulting CM7 KANG into ICEDRoid/download and CM7_BASE_NAME will be ignored.
CM7_BASE_NAME=download/chezbel-cm7-20120113_192339.zip

#
# CM7_TYPE choices are {full, bacon}
# This specifies what type of CM7 build to do and is obviously only needed if you
# are doing a CM7 build.
#  full  = do 'make clobber' and then 'source build/envsetup.sh && brunch $PHONE'
#  bacon = just do a 'make bacon' (this requires that you have previously done
#          a CM7 build either manually or by specifying 'full'. This is because
#          bacon assumes certain things are already pre-built, which is why it
#          is faster.
CM7_MAKE=full

#
# BLACKICE_KERNEL_NAME is the name of the kernel to use when doing the BlackICE
# build, it is ignored for CM7. Typically you will have already copied this file
# into the ICEDRoid/download directory. If the specified kernel does not exist
# the build process will try to download it from a predetermined site, which
# may or may not be successful. If this fails you will not find out until the
# build is almost complete.
BLACKICE_KERNEL_NAME=lordmodUEv8.7-CFS-b2.zip

#
# BLACKICE_GPS_NAME is the name of the GPS region to use for the BlackICE build,
# it is ignored for CM7. This name must match one of the sub-directory names under
# ICEDRoid/sdcard/blackice/gpsconf. For example: TAIWAN
# If this is an empty value, "", then the BlackICE build.sh script will use
# its default value.
BLACKICE_GPS_NAME=

#
# BLACKICE_RIL_NAME is the RIL to use for the BlackICE build, it is ignored for
# CM7. This name must match the numeric part of one of the sub-directory names
# under ICEDroid/sdcard/blackice/ril.
# For example: 2.2.0018G (matches the sub-directory name 'HTC-RIL_2.2.0018G').
# If this is an empty value, "", then the BlackICE build.sh script will use
# its default value.
BLACKICE_RIL_NAME=

#
# Typically patches are specified on the command line because you will get an
# error if you try to apply a patch that was previously applied. So specifying
# patches here are likely to encounter that situation.
#
# If you do want to specify a patch here then you use PATCH_FILE_LIST. If you want
# to specify more than one patch you may need to quote the entire string and leave
# a space between each patch name. For example:
#   PATCH_FILE_LIST="x y z"
#
# The format of a patch file name is very important because the build process
# uses that name to figure out what CM7 or BlackICE directory to change into in
# order to apply the patch! The name of the patch file must match one of these:
#   android_<patch_dir>@<any_name>.{git|patch}
#   blackice_<patch_dir>@<any_name>.{git|patch}
#
# - The prefix of 'android_' or 'blackice_' indicates whether to patch CM7 or
#   BlackICE (currently we haven't tested any BlackICE patching...).
# - The 'patch_dir', which comes between the prefix and a '@' character indicates
#   the directory to apply the patch to. A '_' (underscore) must be used to
#   separate subdirectories.
# - The part after the '@' and before the extension can be any descriptive name
#   you want.
# - The description must be either .git or .patch and which one you use depends
#   on the type of patch.
#   - A .git patch file contains a 'git fetch ...' command
#   - A .patch patch file is a git diff file containing the diffs to apply
#
# Here is an example from the ICEDroid/src directory:
#  android_frameworks_base@FRAMEWORK_TORCH.git
#
# - "android_" indicates we will patch the CM7 sources at ${ANDROID_DIR}
# - "frameworks_base" means we will apply the patch at ${ANDROID_DIR}/frameworks/base
# - "FRAMEWORK_TORCH" is just a descriptive name for us humans
# - ".git" means we will execute this like a shell script.
#
# We could specify that we want to use this patch by doing this (although it's
# better to use the command line):
#   PATCH_FILE_LIST=${BLACKICE_DIR}/src/android_frameworks_base@FRAMEWORK_TORCH.git
PATCH_FILE_LIST=

