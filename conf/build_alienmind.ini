#
# build_example.ini
#

#
# This is an example .ini file that is used by BlackICE/tools/build.sh. Its purpose
# is to define default values for various variables required by build.sh so that
# you don't have to specify all the options on a command line!
#
# This file is part of the BlackICE project, so instead of modifying it, it is
# better to copy it to a new name and modify that file for your use.
#
# The information in this file as well as other command line arguments are processed
# and verified by BlackICE/build_scripts/init.sh.
#
# Most of these can be overriden by a command line option to build.sh. See build.sh
# and init.sh for more details.
#

#
# VERBOSE choices are {0,1,2,3,4,5,6,7,8,9}.
#   0 = extra quite (may not be implemented yet)
#   1 = normal build messages (default)
#   2 = a little more build messages
#   3..9 = even more messages (may not be implemented yet)
VERBOSE=1

#
# CLEAN_TYPE {cm7, bi, all, ""}
# No need to specify CLEAN_TYPE here unless you always want to do a clean instead
# of building anything! Normally the '-clean xxx' command line argument makes
# more sense.
#   ""  = do a normal build
#   cm7 = clean CM7 (make clobber) and then exit
#   bi  = clean BlackICE (make clean) and then exit
#   all = clean CM7 and BlackICE and then exit
# If any clean is specified then nothing will be built and most other arguments
# will be ignored.
#
CLEAN_TYPE=

#
# ROM_TYPE choices are {cm7, bi, all}
# This specifies what ROM (KANG) to build
#   cm7 = Build CM7 only. This requires that you have already checked out the
#         entire CM7 source code!
#   bi  = Build BlackICE only. This requires that you have already cloned the
#         BlackICE git project. This also requires a CM7 KANG to build on top of.
#         This can be one you build previously or downloaded (e.g. a CM7 nightly
#         or stable build).
#   all = Build CM7 first and then build BlackICE on top of that result.
ROM_TYPE=bi

#
# SYNC_TYPE choices are {cm7, bi, all, ""}
# This specifies what, if any, syncing to do before building.
#   ""  = Do not sync anything
#   cm7 = Sync the CM7 source by doing a 'repo sync'
#   bi  = Sync the BlackICE source by doing a 'git pull'
#   all = Synce both CM7 and BlackICE
SYNC_TYPE=

#
# PUSH_TO_PHONE choices are {no, yes}
# Determines whether the final KANG is copied to your phone after it is built
#   no  = no, do not push the result to your phone.
#   yes = 'adb push' the resulting KANG (CM7 or BlackICE) to your phone, requires
#         your phone to be connected to your PC via USB and requires the 'adb'
#         tool to be in your path.
PUSH_TO_PHONE=no

#
# PHONE choices are {ace}
# This may be expanded in the future, but has only been tested with Ace so far.
# This is currently only important when doing a CM7 build.
PHONE=ace

#
# ANDROID_DIR is the full path name to where your CM7 sources are located on
# your hard drive. This is only used if CM7 is going to be built.
ANDROID_DIR=${HOME}/android/system

#
# BLACKICE_DIR is the full path name to where the cloned BlackICE (BlackICE)
# project is located on your hard drive. This is only important if BlackICE is
# going to be built. Note that this needs to point to the BlackICE directory,
# that is created when you clone this project (unless of course you rename that
# directory, but you shouldn't do that).
BLACKICE_DIR=${HOME}/DEVEL/BlackICE

#
# DROPBOX_DIR is the full path name to your dropbox directory (or a sub-directory
# inside of it). If this is not empty then at the end of the build process the
# result files will be copied there. This saves a few steps if you are building
# something that you want to copy to your dropbox and then post a link to and it
# also lets the upload start right away even if you aren't monitoring the build.
#
# If CM7 is being built the resulting KANG will be copied.
# If BlackICE is being built the resulting KANG and ExtraApps will be copied.
DROPBOX_DIR=

#
# If you are building a BlackICE only build you must provide CM7_BASE_NAME, which
# is the name of the CM7 KANG to build BlackICE on top of. Normally you will put
# that file in BlackICE/download.
# If you are building CM7 first then the build process will automatically copy
# that resulting CM7 KANG into BlackICE/download and CM7_BASE_NAME will be ignored.
CM7_BASE_NAME=download/chezbel-cm7-20120113_192339.zip

#
# CM7_TYPE choices are {full, bacon}
# This specifies what type of CM7 build to do and is obviously only needed if you
# are doing a CM7 build.
#  full  = do 'make clobber' and then 'source build/envsetup.sh && brunch $PHONE'
#  bacon = just do a 'make bacon' (this requires that you have previously done
#          a CM7 build either manually or by specifying 'full'. This is because
#          bacon assumes certain things are already pre-built, which is why it
#          is faster.
CM7_MAKE=full

#
# BLACKICE_KERNEL_NAME is the name of the kernel to use when doing the BlackICE
# build, it is ignored for CM7. Typically you will have already copied this file
# into the BlackICE/download directory. If the specified kernel does not exist
# the build process will try to download it from a predetermined site, which
# may or may not be successful. If this fails you will not find out until the
# build is almost complete.
BLACKICE_KERNEL_NAME=lordmodUEv8.7-CFS-b2.zip

#
# BLACKICE_GPS_NAME is the name of the GPS region to use for the BlackICE build,
# it is ignored for CM7. This name must match one of the sub-directory names under
# BlackICE/sdcard/blackice/gpsconf. For example: TAIWAN
# If this is an empty value, "", then the BlackICE build.sh script will use
# its default value.
BLACKICE_GPS_NAME=

#
# BLACKICE_RIL_NAME is the RIL to use for the BlackICE build, it is ignored for
# CM7. This name must match the numeric part of one of the sub-directory names
# under BlackICE/sdcard/blackice/ril.
# For example: 2.2.0018G (matches the sub-directory name 'HTC-RIL_2.2.0018G').
# If this is an empty value, "", then the BlackICE build.sh script will use
# its default value.
BLACKICE_RIL_NAME=

#
# PATCH_xxx variables each control 1 patch (or a set of related patches) found in
# the ${BLACKICE_DIR}/src/default_patches file. The default is for any patch defined
# in that file to be applied, but you can override that here.
#
# If you want to add a new patch you should add a PATCH_xxx variable for it here,
# update the default_patches file to define the patch and add the actual patch
# file in the ${BLACKICE_DIR}/src/ directory. If you forget to add a variable here
# for a new patch then the patch will be run by default.
#
# Patches are normally only applied if you are also doing a SYNC ('repo sync' or
# 'git pull'). See FORCE_PATCHING below.
PATCH_TORCH=1
PATCH_BACKLIGHT=1
PATCH_WEBKIT=0
PATCH_ADWLAUNCHER=0

#
# The default is to ignore ALL patches if you are NOT doing a sync ('repo sync'
# or 'git pull') as part of your build. This is because patching code that has
# already been patched will cause an error. However, you can use the '-fpatch'
# command line argument to force the patches to be run. This will execute all
# patches whose PATCH_xxx variable is true. The main reason you might do this
# is because you did a manual sync and are now doing a build on unpatched source.
# and don't want to sync again.
FORCE_PATCHING=0

#
# The default is to wait for the user to press a key before doing the build. The
# purpose is to allow them to review the build information (after init.sh has checked
# it) to make sure it is what they really want to do.
PROMPT=1
